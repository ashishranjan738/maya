package v1alpha1

import (
	"html/template"
	"strings"
)

// generatorName holds name of the generator
type generatorName string

const (
	// stsTargetAffinityGeneratorName is the name
	// of statefulsetTargetAffinity label selector
	// generator
	stsTargetAffinityGeneratorName generatorName = "sts-target-affinity"

	// targetAffinityGeneratorName is the name of
	// targetAffinty label selector generator
	targetAffinityGeneratorName generatorName = "target-affinity"

	// replicaAntiAffinty is the name of replicaAntiAffinty
	// label selector generator
	replicaAntiAffinityGeneratorName generatorName = "replica-anti-affinty"
)

// labelkey is holds the key of label
type labelKey string

const (
	// targetAffinity is the key of targetAffinty
	// label present in Persistent Volume Claim
	// which is used for triggering targetAffinty policy
	tagetAffinityKey labelKey = "openebs.io/target-affinity"

	// stsTargetAffinty is the key of stsTargetAfiinty
	// label present in Persistent Volume Claim / Storage Class
	// which is used for triggering stsTargetAffinity policy
	stsTargetAffinityKey labelKey = "openebs.io/sts-target-affinity"

	// replicaAntiAffinty is the key of replicaAntiAffinty
	// label present in Persistent Volume Claim which is
	// used for triggering replicaAntiAffinty policy
	replicaAntiAffinty labelKey = "openebs.io/replica-anti-affinity"
)

// selectorType holds the type of selector
type selectorType string

const (
	// podAntiAffinty is a pod anti affinty selector
	// type which means this selector can be used to
	// create repulsion among pods
	podAntiAffinty selectorType = "podAntiAffinity"

	// podAffinty is a pod affinty selector type
	// which means this selector can be used to create
	// attraction among the pods
	podAffinty selectorType = "podAffinity"
)

// LabelSelector holds the values of labels that is useful
// during selection
type LabelSelector struct {
	Key, Value string
}

// Selector holds various selectors generated by
// the selector generator. The selector can of multiple
// type like podAffinity,podAntiAffinity,nodeAffinty,etc.
// Note: this structure will evolve based on the new selectors
// that can come into picture in future
type Selector struct {
	Type   selectorType
	Labels []LabelSelector
}

// SelectorList holds the list of selectors
type SelectorList struct {
	Items []*Selector
}

// generator exposes contracts on which the selectors has
// to be generated
type generator interface {
	name() generatorName
	generate() *Selector
}

// generateOptions abstracts the logic of generating
// the selectors
type generateOptions func(*generateSelector)

// replicaAntiAffinity is the implementation of generating
// podAntiAffinty label selector. The selector generated
// by replicaAntiAffinity can be used by the jiva replicas
// pods to generate anti affinity amongst them
type replicaAntiAffinity struct {
	applicationName string
}

// name returns the name of the target affinity generator
func (p replicaAntiAffinity) name() generatorName {
	return replicaAntiAffinityGeneratorName
}

// generate abstracts the logic of generating
// podAffinity label selector for target
func (p replicaAntiAffinity) generate() *Selector {
	if p.applicationName == "" {
		return nil
	}
	return &Selector{Type: podAffinty, Labels: []LabelSelector{{Key: string(replicaAntiAffinty), Value: p.applicationName}}}
}

// targetAffinity is the implementation of generating
// podAffinty label selector. The selector generated
// by targetAffinity can be used by the cstor/jiva target
// pods to generate affinity for a application
type targetAffinity struct {
	applicationName string
}

// name returns the name of the target affinity generator
func (p targetAffinity) name() generatorName {
	return targetAffinityGeneratorName
}

// generate abstracts the logic of generating
// podAffinity label selector for target
func (p targetAffinity) generate() *Selector {
	if p.applicationName == "" {
		return nil
	}
	return &Selector{Type: podAffinty, Labels: []LabelSelector{{Key: string(tagetAffinityKey), Value: p.applicationName}}}
}

// stsTargetAffinity is the implementation of generating
// podAffinity label selector in case of statefulset
type stsTargetAffinity struct {
	persistentVolumeName, applicationName string
}

// name returns the name of the statefulset target affinity
// generator
func (p stsTargetAffinity) name() generatorName {
	return stsTargetAffinityGeneratorName
}

// generate abstracts the logic of generating podAffinity label
// selector for target in case of statefulset
func (p stsTargetAffinity) generate() *Selector {
	if p.persistentVolumeName == "" || p.applicationName == "" {
		return nil
	}
	splits := strings.Split(p.persistentVolumeName, "-")
	return &Selector{Type: podAffinty, Labels: []LabelSelector{{Key: string(stsTargetAffinityKey), Value: p.applicationName + splits[len(splits)-1]}}}
}

// generatorList holds the list of generators
type generatorList struct {
	items []generator
}

// generatorList adds a new generator to the generatorList
func (p *generatorList) add(g generator) {
	if p == nil || p.items == nil {
		return
	}
	p.items = append(p.items, g)
}

// generateSelector enables generations of multiple
// selectors based on the regisetered generators
type generateSelector struct {
	// List of generators by the selectors has to be
	// generated
	generators *generatorList
	// List of selectors generated by the generators
	selectors *SelectorList
}

// validate can be used to validate the generateSelector
// based on generators present on it
func (g *generateSelector) validate() error {
	return nil
}

// newGenerateSelector returns a new instance of generateSelector
func newGenerateSelector() *generateSelector {
	return &generateSelector{}
}

// newTargetAffinity returns a instance of targetAffinity
// generator
func newTargetAffintyOption(applicationName string) generateOptions {
	return func(s *generateSelector) {
		s.generators.add(targetAffinity{applicationName: applicationName})
	}
}

// stsTargetAffinity returns a instance of stsTargetAffinity
// generator
func newSTSTargetAffinityOption(applicationName, persistentVolumeName string) generateOptions {
	return func(s *generateSelector) {
		s.generators.add(stsTargetAffinity{applicationName: applicationName, persistentVolumeName: persistentVolumeName})
	}
}

// generateSelector returns the list of selectors generated by
// the generateOptions
func generateSelectors(gens ...generateOptions) (*SelectorList, error) {
	if len(gens) == 0 {
		return nil, nil
	}
	process := newGenerateSelector()
	for _, g := range gens {
		if g != nil {
			g(process)
		}
	}
	err := process.validate()
	if err != nil {
		return nil, err
	}

	for _, g := range process.generators.items {
		process.selectors.Items = append(process.selectors.Items, g.generate())
	}
	return process.selectors, nil
}

// TemplateFunctions exposes a few functions as
// go template functions
func TemplateFunctions() template.FuncMap {
	return template.FuncMap{
		"getSelectors": generateSelectors,
	}
}
